Name: Jackson Hoenig
Class: CMP-SCI 4760-001
Project 6

Description: 
-------------------------------------------------------------------------
OSS:
	In this program, the Operating system simulator starts by allocating shared memory
for the Process Control block that has access to a page table of size 32k with each page being
1k large. the total size of the operating system has access to is assumed to be 256k. which is kept track
of as frames in a fTable (frame table) of size 256. at random times from 1-500 nanoseconds a process is forked.
then that process can request for a read or write of a page. the OSS receives this message and checks to see if
it is memory of the frame table. if it is then it is given access and 1 is set for the dirty bit if it is a write.
if it is not in the table then a pagefault occurs and the process waits in a queue until 14ms of logical time have passed.
if all of the max processes are full then the clock is sped up to the first waiting process.
every 1 second the allocation of the frame table is shown. Every 1000 memory accesses a process has the chance to terminate
if it does randomly choose to terminate then the memory is deallocated and the page table and frame table are updated to see that.

NOTE:
	When displaying the allocation of the frame table the frame number is displayed if it is allocated, and
	if it is deallocated but in the table then it is displayed as a '.' 
	See assumptions for more details.

--------------------------------------------------------------------------

Ending situations:
---------------------------------------------------------------------------
1. The program runs for the specified timeout time, terminates all out-
    standing children, closes and deletes IPC data, then exits.
2. The program spawns 100 processes, waits for the timer to run out.
----------------------------------------------------------------------------- 

Assumptions:
-----------------------------------------------------------------------------
1.  1-500ms wait time to fork a process is too long so i changed it to 1-500ns.
2.  for dirty bit optimization we are only adding 10ms if the page is dirty I created this number because it was
	not in the assignment.
-----------------------------------------------------------------------------
How to run:

-----------------------------------------------------------------------------
$ make clean
$ make
$ ./oss [-t Time in Seconds before timeout] [-p Limit of concurrent processes] [-o [1 for FIFO][0 for LRU]

to see LRU
$ ./oss -o 1

for fifo:
$ ./oss -o 0

the logs are listed as "lrulog.txt" and "fifolog.txt"
-----------------------------------------------------------------------------

GitLog:
commit cb0faa96aef189af84e1f2dd1f44a03233f460c5
Author: Jackson Hoenig <Jthkn9@Mail.Umsl.edu>
Date:   Sat Nov 30 17:17:33 2019 -0600

    Final commit.

commit 575a4534313b6bd21cc2b1804eeb423cc3db8e57
Author: Jackson Hoenig <Jthkn9@Mail.Umsl.edu>
Date:   Sat Nov 30 14:38:18 2019 -0600

    just need to deallocate after termination.

commit 2a8cbccd28b3e4127b8d63256a91877c913e5bea
Author: Jackson Hoenig <Jthkn9@Mail.Umsl.edu>
Date:   Sat Nov 30 14:11:25 2019 -0600

    Almost done still need to deallocate after termination and print the allocation every second of the clock.

commit ce68b2fc26fade672c4b7d21d8fc8ad5898d0df0
Author: Jackson Hoenig <Jthkn9@Mail.Umsl.edu>
Date:   Fri Nov 29 20:02:55 2019 -0600

    It is now working with lru and fifo and puts them each in a separate log.

commit ead374e4ff8e8e0f24abd7d655c2e1f40579aee3
Author: Jackson Hoenig <Jthkn9@Mail.Umsl.edu>
Date:   Fri Nov 29 18:06:03 2019 -0600

    Almost done still need to print the correct messages and maybe pagefault if the page is
    not in frame but there is an open spot...

commit 74e7711654fdab89dc8754702242f602ff2d6e85
Author: Jackson Hoenig <Jthkn9@Mail.Umsl.edu>
Date:   Wed Nov 27 18:13:09 2019 -0600

    initial commit. I have an Erange error occuring possibly in the increment clock of the oss or the check clock in the user.
