Name: Jackson Hoenig
Class: CMP-SCI 4760-001
Project 6

Description: 
-------------------------------------------------------------------------
OSS:
	In this program, the Operating system simulator starts by allocating shared memory
for the Process Control block that has access to a page table of size 32k with each page being
1k large. the total size of the operating system has access to is assumed to be 256k. which is kept track
of as frames in a fTable (frame table) of size 256. at random times from 1-500 nanoseconds a process is forked.
then that process can request for a read or write of a page. the OSS receives this message and checks to see if
it is memory of the frame table. if it is then it is given access and 1 is set for the dirty bit if it is a write.
if it is not in the table then a pagefault occurs and the process waits in a queue until 14ms of logical time have passed.
if all of the max processes are full then the clock is sped up to the first waiting process.
every 1 second the allocation of the frame table is shown. Every 1000 memory accesses a process has the chance to terminate
if it does randomly choose to terminate then the memory is deallocated and the page table and frame table are updated to see that.

NOTE:
	When displaying the allocation of the frame table the frame number is displayed if it is allocated, and
	if it is deallocated but in the table then it is displayed as a '.' 
	See assumptions for more details.

--------------------------------------------------------------------------

Ending situations:
---------------------------------------------------------------------------
1. The program runs for the specified timeout time, terminates all out-
    standing children, closes and deletes IPC data, then exits.
2. The program spawns 100 processes, waits for the timer to run out.
----------------------------------------------------------------------------- 

Assumptions:
-----------------------------------------------------------------------------
1.  1-500ms wait time to fork a process is too long so i changed it to 1-500ns.
2.  for dirty bit optimization we are only adding 10ms if the page is dirty I created this number because it was
	not in the assignment.
-----------------------------------------------------------------------------
How to run:

-----------------------------------------------------------------------------
$ make clean
$ make
$ ./oss [-t Time in Seconds before timeout] [-p Limit of concurrent processes] [-o [1 for FIFO][0 for LRU]

to see LRU
$ ./oss -o 1

for fifo:
$ ./oss -o 0

the logs are listed as "lrulog.txt" and "fifolog.txt"
-----------------------------------------------------------------------------

GitLog:
